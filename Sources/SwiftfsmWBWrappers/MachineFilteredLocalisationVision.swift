/*
 * file MachineFilteredLocalisationVision.swift
 *
 * This file was generated by classgenerator from machine_filtered_localisation_vision.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Callum McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Callum McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable superfluous_disable_command
//swiftlint:disable type_body_length
//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

#if canImport(swiftfsm)
import swiftfsm
#endif

/**
 * Results of the FSM (and sub machines) "SMFilterVision".
 * This machine applies some basic filtering to vision output messages.
 * It also handles the coord conversion and kinematics for distance and bearing calculations on the Nao robot.
 */
public struct MachineFilteredLocalisationVision {

    public var _raw: wb_machine_filtered_localisation_vision

    public var numberOfSightings: UInt8 {
        get {
            return self._raw.numberOfSightings
        } set {
            self._raw.numberOfSightings = newValue
        }
    }

    public var sightings: [LandmarkSighting] {
        get {
            var sightings = self._raw.sightings
            return withUnsafePointer(to: &sightings.0) { sightings_p in
                var sightings: [LandmarkSighting] = []
                sightings.reserveCapacity(12)
                for sightings_index in 0..<12 {
                    sightings.append(LandmarkSighting(sightings_p[sightings_index]))
                }
                return sightings
            }
        } set {
            _ = withUnsafeMutablePointer(to: &self._raw.sightings.0) { sightings_p in
                for sightings_index in 0..<min(12, newValue.count) {
                    sightings_p[sightings_index] = newValue[sightings_index]._raw
                }
            }
        }
    }

    public var computedVars: [String: Any] {
        return [
            "numberOfSightings": self._raw.numberOfSightings,
            "sightings": self._raw.sightings
        ]
    }

    public var manipulators: [String: (Any) -> Any] {
        return [:]
    }

    public var validVars: [String: [Any]] {
        return ["_raw": []]
    }

    /**
     * Create a new `wb_machine_filtered_localisation_vision`.
     */
    public init(numberOfSightings: UInt8 = 0, sightings: [LandmarkSighting] = [LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting()), LandmarkSighting(wb_landmark_sighting())]) {
        self._raw = wb_machine_filtered_localisation_vision()
        self.numberOfSightings = numberOfSightings
        self.sightings = sightings
    }

    /**
     * Create a new `wb_machine_filtered_localisation_vision`.
     */
    public init(_ rawValue: wb_machine_filtered_localisation_vision) {
        self._raw = rawValue
    }

    /**
     * Create a `wb_machine_filtered_localisation_vision` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let numberOfSightings = dictionary["numberOfSightings"] as? UInt8,
            let sightings = dictionary["sightings"] as? [LandmarkSighting]
        else {
            fatalError("Unable to convert \(dictionary) to wb_machine_filtered_localisation_vision.")
        }
        self.numberOfSightings = numberOfSightings
        self.sightings = sightings
    }

    private func firstSighting(sightingType: LandmarkSightingType) -> LandmarkSighting? {
        for sighting in sightings {
            if sighting.sightingType == sightingType {
                return sighting
            }
        }
        return nil
    }

    public var ball: LandmarkSighting? {
        return firstSighting(sightingType: BallSightingType)
    }

    public var firstGenericGoalPost: LandmarkSighting? {
        return firstSighting(sightingType: GenericGoalPostSightingType)
    }

    public var leftGoalPost: LandmarkSighting? {
        return firstSighting(sightingType: LeftGoalPostSightingType)
    }

    public var rightGoalPost: LandmarkSighting? {
        return firstSighting(sightingType: RightGoalPostSightingType)
    }

    public var goal: LandmarkSighting? {
        return firstSighting(sightingType: GoalLandmarkSightingType)
    }

    public var lineHorizon: LandmarkSighting? {
        return firstSighting(sightingType: LineHorizonSightingType)
    }

    public var cornerHorizon: LandmarkSighting? {
        return firstSighting(sightingType: CornerHorizonSightingType)
    }

    public var horizon: LandmarkSighting? {
        guard let lineSighting = lineHorizon else {
            return cornerHorizon
        }
        return lineSighting
    }

    public var line: LandmarkSighting? {
        return firstSighting(sightingType: StraightLineSightingType)
    }

    public var cornerLine: LandmarkSighting? {
        return firstSighting(sightingType: CornerLineSightingType)
    }

    public var tLine: LandmarkSighting? {
        return firstSighting(sightingType: TIntersectionLineSightingType)
    }

    public var crossLine: LandmarkSighting? {
        return firstSighting(sightingType: CrossLineSightingType)
    }

}

extension MachineFilteredLocalisationVision: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "numberOfSightings=\(self.numberOfSightings)"
        descString += ", "
        if self.sightings.isEmpty {
            descString += "sightings={}"
        } else {
            let first = "{" + self.sightings[0].description + "}"
            descString += "sightings={"
            descString += self.sightings.dropFirst().reduce("\(first)") { $0 + ", " + "{" + $1.description + "}" }
            descString += "}"
        }
        return descString
    }

}

extension MachineFilteredLocalisationVision: Equatable {}

public func == (lhs: MachineFilteredLocalisationVision, rhs: MachineFilteredLocalisationVision) -> Bool {
    return lhs.numberOfSightings == rhs.numberOfSightings
        && lhs.sightings == rhs.sightings
}

extension wb_machine_filtered_localisation_vision: Equatable {}

public func == (lhs: wb_machine_filtered_localisation_vision, rhs: wb_machine_filtered_localisation_vision) -> Bool {
    return MachineFilteredLocalisationVision(lhs) == MachineFilteredLocalisationVision(rhs)
}

#if canImport(swiftfsm)
extension MachineFilteredLocalisationVision: ExternalVariables, KripkeVariablesModifier {}
#endif
