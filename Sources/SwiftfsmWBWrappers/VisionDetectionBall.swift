/*
 * file VisionDetectionBall.swift
 *
 * This file was generated by classgenerator from vision_detection_ball.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Carl Lusty. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Carl Lusty.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable superfluous_disable_command
//swiftlint:disable type_body_length
//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * Results for the Ball Ray Tracer (guvision). 
 * Results are in pixels of the image utilised, at whatever the resolution happen to be.
 * You can check the vision_detection_balls message for resolution information.
 */
public struct VisionDetectionBall {

    public var _raw: wb_vision_detection_ball

    public var sightingType: BallOptions {
        get {
            return self._raw.sightingType
        } set {
            self._raw.sightingType = newValue
        }
    }

    public var coordinate: PixelCoordinate {
        get {
            return PixelCoordinate(self._raw.coordinate)
        } set {
            self._raw.coordinate = newValue._raw
        }
    }

    public var verticalRadius: UInt16 {
        get {
            return self._raw.verticalRadius
        } set {
            self._raw.verticalRadius = newValue
        }
    }

    public var horizontalRadius: UInt16 {
        get {
            return self._raw.horizontalRadius
        } set {
            self._raw.horizontalRadius = newValue
        }
    }

    public var computedVars: [String: Any] {
        return [
            "sightingType": self._raw.sightingType,
            "coordinate": self._raw.coordinate,
            "verticalRadius": self._raw.verticalRadius,
            "horizontalRadius": self._raw.horizontalRadius
        ]
    }

    public var manipulators: [String: (Any) -> Any] {
        return [:]
    }

    public var validVars: [String: [Any]] {
        return ["_raw": []]
    }

    /**
     * Create a new `wb_vision_detection_ball`.
     */
    public init(sightingType: BallOptions = NoBallDetected, coordinate: PixelCoordinate = PixelCoordinate(wb_pixel_coordinate()), verticalRadius: UInt16 = 0, horizontalRadius: UInt16 = 0) {
        self._raw = wb_vision_detection_ball()
        self.sightingType = sightingType
        self.coordinate = coordinate
        self.verticalRadius = verticalRadius
        self.horizontalRadius = horizontalRadius
    }

    /**
     * Create a new `wb_vision_detection_ball`.
     */
    public init(_ rawValue: wb_vision_detection_ball) {
        self._raw = rawValue
    }

    /**
     * Create a `wb_vision_detection_ball` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any?]) {
        self.init()
        guard
            let sightingType = dictionary["sightingType"] as? BallOptions,
            let coordinate = (dictionary["coordinate"] as? [String: Any]).flatMap({ PixelCoordinate(fromDictionary: $0)  }),
            let verticalRadius = dictionary["verticalRadius"] as? UInt16,
            let horizontalRadius = dictionary["horizontalRadius"] as? UInt16
        else {
            fatalError("Unable to convert \(dictionary) to wb_vision_detection_ball.")
        }
        self.sightingType = sightingType
        self.coordinate = coordinate
        self.verticalRadius = verticalRadius
        self.horizontalRadius = horizontalRadius
    }

}

extension VisionDetectionBall: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "sightingType=\(self.sightingType.rawValue)"
        descString += ", "
        descString += "coordinate={" + self.coordinate.description + "}"
        descString += ", "
        descString += "verticalRadius=\(self.verticalRadius)"
        descString += ", "
        descString += "horizontalRadius=\(self.horizontalRadius)"
        return descString
    }

}

extension VisionDetectionBall: Equatable {}

public func == (lhs: VisionDetectionBall, rhs: VisionDetectionBall) -> Bool {
    return lhs.sightingType == rhs.sightingType
        && lhs.coordinate == rhs.coordinate
        && lhs.verticalRadius == rhs.verticalRadius
        && lhs.horizontalRadius == rhs.horizontalRadius
}

extension wb_vision_detection_ball: Equatable {}

public func == (lhs: wb_vision_detection_ball, rhs: wb_vision_detection_ball) -> Bool {
    return VisionDetectionBall(lhs) == VisionDetectionBall(rhs)
}
