/*
 * file VisionControlStatus.swift
 *
 * This file was generated by classgenerator from vision_control_status.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Eugene Gilmore. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Eugene Gilmore.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable superfluous_disable_command
//swiftlint:disable type_body_length
//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

/**
 * The control status message used by guvision, guvision will post the current state of the pipeline once a frame with the message, various properties can also be set by post a vision_controll message with this type
 */
public struct VisionControlStatus {

    public var _raw: wb_vision_control_status

    public var cameraResolution: Resolutions {
        get {
            return self._raw.cameraResolution
        } set {
            self._raw.cameraResolution = newValue
        }
    }

    public var pipelineRunning: Bool {
        get {
            return self._raw.pipelineRunning
        } set {
            self._raw.pipelineRunning = newValue
        }
    }

    public var selectedCamera: VisionCamera {
        get {
            return self._raw.selectedCamera
        } set {
            self._raw.selectedCamera = newValue
        }
    }

    public var saveImage: SaveFileType {
        get {
            return self._raw.saveImage
        } set {
            self._raw.saveImage = newValue
        }
    }

    public var saveClassifiedImage: Bool {
        get {
            return self._raw.saveClassifiedImage
        } set {
            self._raw.saveClassifiedImage = newValue
        }
    }

    public var pipeline: NamedPipeline {
        get {
            return self._raw.pipeline
        } set {
            self._raw.pipeline = newValue
        }
    }

    public var chooseCamera: Int32 {
        get {
            return self._raw.chooseCamera
        } set {
            self._raw.chooseCamera = newValue
        }
    }

    public var confidence: Float {
        get {
            return self._raw.confidence
        } set {
            self._raw.confidence = newValue
        }
    }

    public var networkTop: NeuralNetworkType {
        get {
            return self._raw.networkTop
        } set {
            self._raw.networkTop = newValue
        }
    }

    public var networkBottom: NeuralNetworkType {
        get {
            return self._raw.networkBottom
        } set {
            self._raw.networkBottom = newValue
        }
    }

    public var streamingSource: StreamingType {
        get {
            return self._raw.streamingSource
        } set {
            self._raw.streamingSource = newValue
        }
    }

    public var imageInput: Bool {
        get {
            return self._raw.imageInput
        } set {
            self._raw.imageInput = newValue
        }
    }

    public var jpegStreamQuality: Int32 {
        get {
            return self._raw.jpegStreamQuality
        } set {
            self._raw.jpegStreamQuality = newValue
        }
    }

    public var jpegStreamStride: Int32 {
        get {
            return self._raw.jpegStreamStride
        } set {
            self._raw.jpegStreamStride = newValue
        }
    }

    public var frameRate: Int32 {
        get {
            return self._raw.frameRate
        } set {
            self._raw.frameRate = newValue
        }
    }

    public var runPipelineOnce: Bool {
        get {
            return self._raw.runPipelineOnce
        } set {
            self._raw.runPipelineOnce = newValue
        }
    }

    public var frameNumber: UInt64 {
        get {
            return self._raw.frameNumber
        } set {
            self._raw.frameNumber = newValue
        }
    }

    public var colourCalibration: String {
        get {
            var colourCalibration = self._raw.colourCalibration
            return String(cString: withUnsafePointer(to: &colourCalibration.0) { $0 })
        } set {
            _ = withUnsafeMutablePointer(to: &self._raw.colourCalibration.0) { colourCalibration_p in
                let arr = newValue.utf8CString
                _ = arr.withUnsafeBufferPointer {
                    strncpy(colourCalibration_p, $0.baseAddress!, 10)
                }
            }
        }
    }

    public var imageTime: timeval {
        get {
            return self._raw.imageTime
        } set {
            self._raw.imageTime = newValue
        }
    }

    public var computedVars: [String: Any] {
        return [
            "cameraResolution": self._raw.cameraResolution,
            "pipelineRunning": self._raw.pipelineRunning,
            "selectedCamera": self._raw.selectedCamera,
            "saveImage": self._raw.saveImage,
            "saveClassifiedImage": self._raw.saveClassifiedImage,
            "pipeline": self._raw.pipeline,
            "chooseCamera": self._raw.chooseCamera,
            "confidence": self._raw.confidence,
            "networkTop": self._raw.networkTop,
            "networkBottom": self._raw.networkBottom,
            "streamingSource": self._raw.streamingSource,
            "imageInput": self._raw.imageInput,
            "jpegStreamQuality": self._raw.jpegStreamQuality,
            "jpegStreamStride": self._raw.jpegStreamStride,
            "frameRate": self._raw.frameRate,
            "runPipelineOnce": self._raw.runPipelineOnce,
            "frameNumber": self._raw.frameNumber,
            "colourCalibration": self._raw.colourCalibration,
            "imageTime": self._raw.imageTime
        ]
    }

    public var manipulators: [String: (Any) -> Any] {
        return [:]
    }

    public var validVars: [String: [Any]] {
        return ["_raw": []]
    }

    /**
     * Create a new `wb_vision_control_status`.
     */
    public init(cameraResolution: Resolutions = VGA, pipelineRunning: Bool = true, selectedCamera: VisionCamera = Top, saveImage: SaveFileType = None, saveClassifiedImage: Bool = false, pipeline: NamedPipeline = Soccer, chooseCamera: Int32 = 0, confidence: Float = 0.8, networkTop: NeuralNetworkType = v2, networkBottom: NeuralNetworkType = v2, streamingSource: StreamingType = Normal, imageInput: Bool = false, jpegStreamQuality: Int32 = 30, jpegStreamStride: Int32 = 4, frameRate: Int32 = 0, runPipelineOnce: Bool = false, frameNumber: UInt64 = 0, colourCalibration: String = "class", imageTime: timeval = timeval()) {
        self._raw = wb_vision_control_status()
        self.cameraResolution = cameraResolution
        self.pipelineRunning = pipelineRunning
        self.selectedCamera = selectedCamera
        self.saveImage = saveImage
        self.saveClassifiedImage = saveClassifiedImage
        self.pipeline = pipeline
        self.chooseCamera = chooseCamera
        self.confidence = confidence
        self.networkTop = networkTop
        self.networkBottom = networkBottom
        self.streamingSource = streamingSource
        self.imageInput = imageInput
        self.jpegStreamQuality = jpegStreamQuality
        self.jpegStreamStride = jpegStreamStride
        self.frameRate = frameRate
        self.runPipelineOnce = runPipelineOnce
        self.frameNumber = frameNumber
        self.colourCalibration = colourCalibration
        self.imageTime = imageTime
    }

    /**
     * Create a new `wb_vision_control_status`.
     */
    public init(_ rawValue: wb_vision_control_status) {
        self._raw = rawValue
    }

    /**
     * Create a `wb_vision_control_status` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any]) {
        self.init()
        guard
            let cameraResolution = dictionary["cameraResolution"] as? Resolutions,
            let pipelineRunning = dictionary["pipelineRunning"] as? Bool,
            let selectedCamera = dictionary["selectedCamera"] as? VisionCamera,
            let saveImage = dictionary["saveImage"] as? SaveFileType,
            let saveClassifiedImage = dictionary["saveClassifiedImage"] as? Bool,
            let pipeline = dictionary["pipeline"] as? NamedPipeline,
            let chooseCamera = dictionary["chooseCamera"] as? Int32,
            let confidence = dictionary["confidence"] as? Float,
            let networkTop = dictionary["networkTop"] as? NeuralNetworkType,
            let networkBottom = dictionary["networkBottom"] as? NeuralNetworkType,
            let streamingSource = dictionary["streamingSource"] as? StreamingType,
            let imageInput = dictionary["imageInput"] as? Bool,
            let jpegStreamQuality = dictionary["jpegStreamQuality"] as? Int32,
            let jpegStreamStride = dictionary["jpegStreamStride"] as? Int32,
            let frameRate = dictionary["frameRate"] as? Int32,
            let runPipelineOnce = dictionary["runPipelineOnce"] as? Bool,
            let frameNumber = dictionary["frameNumber"] as? UInt64,
            let colourCalibration = dictionary["colourCalibration"] as? String,
            let imageTime = dictionary["imageTime"] as? timeval
        else {
            fatalError("Unable to convert \(dictionary) to wb_vision_control_status.")
        }
        self.cameraResolution = cameraResolution
        self.pipelineRunning = pipelineRunning
        self.selectedCamera = selectedCamera
        self.saveImage = saveImage
        self.saveClassifiedImage = saveClassifiedImage
        self.pipeline = pipeline
        self.chooseCamera = chooseCamera
        self.confidence = confidence
        self.networkTop = networkTop
        self.networkBottom = networkBottom
        self.streamingSource = streamingSource
        self.imageInput = imageInput
        self.jpegStreamQuality = jpegStreamQuality
        self.jpegStreamStride = jpegStreamStride
        self.frameRate = frameRate
        self.runPipelineOnce = runPipelineOnce
        self.frameNumber = frameNumber
        self.colourCalibration = colourCalibration
        self.imageTime = imageTime
    }

}

extension VisionControlStatus: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "cameraResolution=\(self.cameraResolution.rawValue)"
        descString += ", "
        descString += "pipelineRunning=\(self.pipelineRunning)"
        descString += ", "
        descString += "selectedCamera=\(self.selectedCamera.rawValue)"
        descString += ", "
        descString += "saveImage=\(self.saveImage.rawValue)"
        descString += ", "
        descString += "saveClassifiedImage=\(self.saveClassifiedImage)"
        descString += ", "
        descString += "pipeline=\(self.pipeline.rawValue)"
        descString += ", "
        descString += "chooseCamera=\(self.chooseCamera)"
        descString += ", "
        descString += "confidence=\(self.confidence)"
        descString += ", "
        descString += "networkTop=\(self.networkTop.rawValue)"
        descString += ", "
        descString += "networkBottom=\(self.networkBottom.rawValue)"
        descString += ", "
        descString += "streamingSource=\(self.streamingSource.rawValue)"
        descString += ", "
        descString += "imageInput=\(self.imageInput)"
        descString += ", "
        descString += "jpegStreamQuality=\(self.jpegStreamQuality)"
        descString += ", "
        descString += "jpegStreamStride=\(self.jpegStreamStride)"
        descString += ", "
        descString += "frameRate=\(self.frameRate)"
        descString += ", "
        descString += "runPipelineOnce=\(self.runPipelineOnce)"
        descString += ", "
        descString += "frameNumber=\(self.frameNumber)"
        descString += ", "
        descString += "colourCalibration=\(self.colourCalibration)"
        return descString
    }

}

extension VisionControlStatus: Equatable {}

public func == (lhs: VisionControlStatus, rhs: VisionControlStatus) -> Bool {
    return lhs.cameraResolution == rhs.cameraResolution
        && lhs.pipelineRunning == rhs.pipelineRunning
        && lhs.selectedCamera == rhs.selectedCamera
        && lhs.saveImage == rhs.saveImage
        && lhs.saveClassifiedImage == rhs.saveClassifiedImage
        && lhs.pipeline == rhs.pipeline
        && lhs.chooseCamera == rhs.chooseCamera
        && lhs.confidence == rhs.confidence
        && lhs.networkTop == rhs.networkTop
        && lhs.networkBottom == rhs.networkBottom
        && lhs.streamingSource == rhs.streamingSource
        && lhs.imageInput == rhs.imageInput
        && lhs.jpegStreamQuality == rhs.jpegStreamQuality
        && lhs.jpegStreamStride == rhs.jpegStreamStride
        && lhs.frameRate == rhs.frameRate
        && lhs.runPipelineOnce == rhs.runPipelineOnce
        && lhs.frameNumber == rhs.frameNumber
        && lhs.colourCalibration == rhs.colourCalibration
}

extension wb_vision_control_status: Equatable {}

public func == (lhs: wb_vision_control_status, rhs: wb_vision_control_status) -> Bool {
    return VisionControlStatus(lhs) == VisionControlStatus(rhs)
}
