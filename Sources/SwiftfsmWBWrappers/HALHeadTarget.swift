/*
 * file HALHeadTarget.swift
 *
 * This file was generated by classgenerator from HAL_HeadTarget.gen.
 * DO NOT CHANGE MANUALLY!
 *
 * Copyright Â© 2020 Morgan McColl. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above
 *    copyright notice, this list of conditions and the following
 *    disclaimer in the documentation and/or other materials
 *    provided with the distribution.
 *
 * 3. All advertising materials mentioning features or use of this
 *    software must display the following acknowledgement:
 *
 *        This product includes software developed by Morgan McColl.
 *
 * 4. Neither the name of the author nor the names of contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
 * OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * -----------------------------------------------------------------------
 * This program is free software; you can redistribute it and/or
 * modify it under the above terms or under the terms of the GNU
 * General Public License as published by the Free Software Foundation;
 * either version 2 of the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, see http://www.gnu.org/licenses/
 * or write to the Free Software Foundation, Inc., 51 Franklin Street,
 * Fifth Floor, Boston, MA  02110-1301, USA.
 *
 */

//swiftlint:disable superfluous_disable_command
//swiftlint:disable type_body_length
//swiftlint:disable function_body_length
//swiftlint:disable file_length
//swiftlint:disable line_length
//swiftlint:disable identifier_name

import GUUnits

/**
 * Gen file for preexisting HAL_HeadTarget.h file. Provides commands to move the robots head.
 */
public struct HALHeadTarget {

    public var _raw: wb_hal_headtarget

    public var target_pitchAngle: Float {
        get {
            return self._raw.target_pitchAngle
        } set {
            self._raw.target_pitchAngle = newValue
        }
    }

    public var target_yawAngle: Float {
        get {
            return self._raw.target_yawAngle
        } set {
            self._raw.target_yawAngle = newValue
        }
    }

    public var target_movement_time: Int32 {
        get {
            return self._raw.target_movement_time
        } set {
            self._raw.target_movement_time = newValue
        }
    }

    public var head_stopped: Bool {
        get {
            return self._raw.head_stopped == 1
        } set {
            self._raw.head_stopped = true == newValue ? 1 : 0
        }
    }

    public var head_cmd_mask: Bool {
        get {
            return self._raw.head_cmd_mask == 1
        } set {
            self._raw.head_cmd_mask = true == newValue ? 1 : 0
        }
    }

    public var computedVars: [String: Any] {
        return [
            "target_pitchAngle": self._raw.target_pitchAngle,
            "target_yawAngle": self._raw.target_yawAngle,
            "target_movement_time": self._raw.target_movement_time,
            "head_stopped": self._raw.head_stopped,
            "head_cmd_mask": self._raw.head_cmd_mask
        ]
    }

    public var manipulators: [String: (Any) -> Any] {
        return [:]
    }

    public var validVars: [String: [Any]] {
        return ["_raw": []]
    }

    /**
     * Create a new `wb_hal_headtarget`.
     */
    public init(target_pitchAngle: Float = 0.0, target_yawAngle: Float = 0.0, target_movement_time: Int32 = 1000000, head_stopped: Bool = true, head_cmd_mask: Bool = false) {
        self._raw = wb_hal_headtarget()
        self.target_pitchAngle = target_pitchAngle
        self.target_yawAngle = target_yawAngle
        self.target_movement_time = target_movement_time
        self.head_stopped = head_stopped
        self.head_cmd_mask = head_cmd_mask
    }

    /**
     * Create a new `wb_hal_headtarget`.
     */
    public init(_ rawValue: wb_hal_headtarget) {
        self._raw = rawValue
    }

    /**
     * Create a `wb_hal_headtarget` from a dictionary.
     */
    public init(fromDictionary dictionary: [String: Any?]) {
        self.init()
        guard
            let target_pitchAngle = dictionary["target_pitchAngle"] as? Float,
            let target_yawAngle = dictionary["target_yawAngle"] as? Float,
            let target_movement_time = dictionary["target_movement_time"] as? Int32,
            let head_stopped = dictionary["head_stopped"] as? Bool,
            let head_cmd_mask = dictionary["head_cmd_mask"] as? Bool
        else {
            fatalError("Unable to convert \(dictionary) to wb_hal_headtarget.")
        }
        self.target_pitchAngle = target_pitchAngle
        self.target_yawAngle = target_yawAngle
        self.target_movement_time = target_movement_time
        self.head_stopped = head_stopped
        self.head_cmd_mask = head_cmd_mask
    }

    public mutating func stop() {
        head_stopped = true
        head_cmd_mask = true
    }

    public mutating func goToWithTime(yaw: Angle, pitch: Angle, time: Time = .microseconds(1000000)) {
        target_pitchAngle = Float(pitch.radians_f)
        target_yawAngle = Float(yaw.radians_f)
        target_movement_time = Int32(time.microseconds_t)
        head_stopped = false
        head_cmd_mask = true
    }

}

extension HALHeadTarget: CustomStringConvertible {

    /**
     * Convert to a description String.
     */
    public var description: String {
        var descString = ""
        descString += "target_pitchAngle=\(self.target_pitchAngle)"
        descString += ", "
        descString += "target_yawAngle=\(self.target_yawAngle)"
        descString += ", "
        descString += "target_movement_time=\(self.target_movement_time)"
        descString += ", "
        descString += "head_stopped=\(self.head_stopped ? 1 : 0)"
        descString += ", "
        descString += "head_cmd_mask=\(self.head_cmd_mask ? 1 : 0)"
        return descString
    }

}

extension HALHeadTarget: Equatable {}

public func == (lhs: HALHeadTarget, rhs: HALHeadTarget) -> Bool {
    return lhs.target_pitchAngle == rhs.target_pitchAngle
        && lhs.target_yawAngle == rhs.target_yawAngle
        && lhs.target_movement_time == rhs.target_movement_time
        && lhs.head_stopped == rhs.head_stopped
        && lhs.head_cmd_mask == rhs.head_cmd_mask
}

extension wb_hal_headtarget: Equatable {}

public func == (lhs: wb_hal_headtarget, rhs: wb_hal_headtarget) -> Bool {
    return HALHeadTarget(lhs) == HALHeadTarget(rhs)
}
